# Pipeline for running SDL scans
# https://aka.ms/yaml

trigger: none

pr:
- master

pool:
  vmImage: 'windows-2019'

variables:
  codeSignPolicyFile: ''
  codeSignEnabled: false

steps:
  - task: DownloadPackage@1
    displayName: "Download console extension validation library"
    inputs:
      packageType: 'nuget'
      feed: '/9b6eeac8-9d95-4be6-b625-aad8659f5c65'
      view: 'dc24c3c3-a05b-4e24-80f2-8c90bf700a5f'
      definition: 'bb29b373-f8cb-4ab6-800a-89007c55cfe7'
      version: '5.2103.1097.1000'
      downloadPath: '$(System.ArtifactsDirectory)'

  - task: PowerShell@2
    displayName: "Download, Expand, and Validate Console Extensions"
    inputs:
      filePath: '$(Build.SourcesDirectory)\tools\Extensiondownloader.ps1'
      failOnStderr: true
      workingDirectory: '$(Build.SourcesDirectory)\objects'

  - powershell: 'get-childitem env:'
    displayName: "Print variables"

  - task: EsrpMalwareScanning@1
    displayName: 'Run ESRP Malware Scan'
    inputs:
      ConnectedServiceName: 'ESRP Malware Scanning service connection'
      FolderPath: '$(build.artifactstagingdirectory)'
      Pattern: '*.*'
      Region: 'PuertoRico'
      SessionTimeout: '30'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      targetType: F
      targetArgument: '$(Build.SourcesDirectory)\objects'
    continueOnError: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'Run AntiMalware Scan'
    inputs:
      FileDirPath: '$(Build.SourcesDirectory)\objects'
      EnableServices: true
      TreatSignatureUpdateFailureAs: Standard
      TreatStaleSignatureAs: Warning
    continueOnError: true

  - task: CredScan@3
    inputs:
      toolMajorVersion: 'V2'

  - task: CodeSign@1
    condition: and(succeeded(), eq(variables['codeSignEnabled'], 'true'))
    inputs:
      Path: '$(Build.SourcesDirectory)\objects'
      verboseOutput: true
      Targets: '**.dll;**.exe;**sys'
      PolicyType: 'Custom'
      PolicyFile: '$(codeSignPolicyFile)'
      ExcludePassesFromLog: false

  - task: PublishSecurityAnalysisLogs@3
    inputs:
      ArtifactName: 'CodeAnalysisLogs'
      ArtifactType: 'Container'
      AllTools: true
      ToolLogsNotFoundAction: 'Standard'

  - task: PostAnalysis@2
    inputs:
      AllTools: false
      APIScan: false
      BinSkim: false
      CodesignValidation: true
      CodesignValidationBreakOn: 'WarningAbove'
      CredScan: true
      FortifySCA: false
      FxCop: false
      ModernCop: false
      PoliCheck: true
      PoliCheckBreakOn: 'Severity2Above'
      RoslynAnalyzers: false
      SDLNativeRules: false
      Semmle: false
      TSLint: false
      ToolLogsNotFoundAction: 'Error'
