<?xml version="1.0" encoding="utf-16"?>
<DesiredConfigurationDigest xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/07/10/DesiredConfiguration">
  <!--Authored against the following schema version: 5-->
  <OperatingSystem AuthoringScopeId="ScopeId_0D7D8B60-F2F9-484A-B9F3-4A8B68D14D59" LogicalName="LogicalName_a9eb8299-02df-423d-ae80-b52768655212" Version="6">
    <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
      <DisplayName Text="CVE-2017-5715 - Branch target injection" ResourceId="ID-0928b6b1-1e3c-48e5-8535-b581159b6eee" />
      <Description Text="Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis." ResourceId="ID-687c502e-c914-4702-b263-86525fafb69b" />
    </Annotation>
    <Parts>
      <SuppressionReferences />
    </Parts>
    <Settings>
      <RootComplexSetting>
        <SimpleSetting LogicalName="ScriptSetting_004f0999-2dc2-48b0-bb70-f61035a60a33" DataType="String">
          <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
            <DisplayName Text="Check whether Windows OS support for branch target injection mitigation is enabled" ResourceId="ID-00911355-e9cf-4f50-80fe-95b1360d036e" />
            <Description Text="" />
          </Annotation>
          <ScriptDiscoverySource Is64Bit="true">
            <DiscoveryScriptBody ScriptType="PowerShell">$NtQSIDefinition = @'
    [DllImport("ntdll.dll")]
    public static extern int NtQuerySystemInformation(uint systemInformationClass, IntPtr systemInformation, uint systemInformationLength, IntPtr returnLength);
'@
    
    $ntdll = Add-Type -MemberDefinition $NtQSIDefinition -Name 'ntdll' -Namespace 'Win32' -PassThru


    [System.IntPtr]$systemInformationPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)
    [System.IntPtr]$returnLengthPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)

    try {
    
        #
        # Query branch target injection information.
        #

        # Write-Host "Speculation control settings for CVE-2017-5715 [branch target injection]" -ForegroundColor Cyan
        # Write-Host

        $btiHardwarePresent = $false
        $btiWindowsSupportPresent = $false
        $btiWindowsSupportEnabled = $false
        $btiDisabledBySystemPolicy = $false
        $btiDisabledByNoHardwareSupport = $false
    
        [System.UInt32]$systemInformationClass = 201
        [System.UInt32]$systemInformationLength = 4

        $retval = $ntdll::NtQuerySystemInformation($systemInformationClass, $systemInformationPtr, $systemInformationLength, $returnLengthPtr)

        if ($retval -eq 0xc0000003 -or $retval -eq 0xc0000002) {
            # fallthrough
        }
        elseif ($retval -ne 0) {
            throw (("Querying branch target injection information failed with error {0:X8}" -f $retval))
        }
        else {
    
            [System.UInt32]$scfBpbEnabled = 0x01
            [System.UInt32]$scfBpbDisabledSystemPolicy = 0x02
            [System.UInt32]$scfBpbDisabledNoHardwareSupport = 0x04
            [System.UInt32]$scfHwReg1Enumerated = 0x08
            [System.UInt32]$scfHwReg2Enumerated = 0x10
            [System.UInt32]$scfHwMode1Present = 0x20
            [System.UInt32]$scfHwMode2Present = 0x40
            [System.UInt32]$scfSmepPresent = 0x80

            [System.UInt32]$flags = [System.UInt32][System.Runtime.InteropServices.Marshal]::ReadInt32($systemInformationPtr)

            $btiHardwarePresent = ((($flags -band $scfHwReg1Enumerated) -ne 0) -or (($flags -band $scfHwReg2Enumerated)))
            $btiWindowsSupportPresent = $true
            $btiWindowsSupportEnabled = (($flags -band $scfBpbEnabled) -ne 0)

            if ($btiWindowsSupportEnabled -eq $false) {
                $btiDisabledBySystemPolicy = (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
                $btiDisabledByNoHardwareSupport = (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            }

            # if ($PSBoundParameters['Verbose']) {
            #     Write-Host "BpbEnabled                   :" (($flags -band $scfBpbEnabled) -ne 0)
            #     Write-Host "BpbDisabledSystemPolicy      :" (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
            #     Write-Host "BpbDisabledNoHardwareSupport :" (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            #     Write-Host "HwReg1Enumerated             :" (($flags -band $scfHwReg1Enumerated) -ne 0)
            #     Write-Host "HwReg2Enumerated             :" (($flags -band $scfHwReg2Enumerated) -ne 0)
            #     Write-Host "HwMode1Present               :" (($flags -band $scfHwMode1Present) -ne 0)
            #     Write-Host "HwMode2Present               :" (($flags -band $scfHwMode2Present) -ne 0)
            #     Write-Host "SmepPresent                  :" (($flags -band $scfSmepPresent) -ne 0)
            # }
        }

        # Write-Host "Hardware support for branch target injection mitigation is present:"($btiHardwarePresent) -ForegroundColor $(If ($btiHardwarePresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # Write-Host "Windows OS support for branch target injection mitigation is present:"($btiWindowsSupportPresent) -ForegroundColor $(If ($btiWindowsSupportPresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # "Windows OS support for branch target injection mitigation is enabled:"
        Write-Host ($btiWindowsSupportEnabled) -ForegroundColor $(If ($btiWindowsSupportEnabled) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
  
        # if ($btiWindowsSupportPresent -eq $true -and $btiWindowsSupportEnabled -eq $false) {
        #     Write-Host -ForegroundColor Red "Windows OS support for branch target injection mitigation is disabled by system policy:"($btiDisabledBySystemPolicy)
        #     Write-Host -ForegroundColor Red "Windows OS support for branch target injection mitigation is disabled by absence of hardware support:"($btiDisabledByNoHardwareSupport)
        # }

    }
    finally
    {
        if ($systemInformationPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($systemInformationPtr)
        }
 
        if ($returnLengthPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($returnLengthPtr)
        }
    }</DiscoveryScriptBody>
          </ScriptDiscoverySource>
        </SimpleSetting>
        <SimpleSetting LogicalName="ScriptSetting_95f57c75-84de-4939-b179-94e349ae7204" DataType="String">
          <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
            <DisplayName Text="Check whether Windows OS support for branch target injection mitigation is disabled by system policy" ResourceId="ID-aa96cfa1-810a-4218-8658-62105fd9b12a" />
            <Description Text="" />
          </Annotation>
          <ScriptDiscoverySource Is64Bit="true">
            <DiscoveryScriptBody ScriptType="PowerShell">$NtQSIDefinition = @'
    [DllImport("ntdll.dll")]
    public static extern int NtQuerySystemInformation(uint systemInformationClass, IntPtr systemInformation, uint systemInformationLength, IntPtr returnLength);
'@
    
    $ntdll = Add-Type -MemberDefinition $NtQSIDefinition -Name 'ntdll' -Namespace 'Win32' -PassThru


    [System.IntPtr]$systemInformationPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)
    [System.IntPtr]$returnLengthPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)

    try {
    
        #
        # Query branch target injection information.
        #

        # Write-Host "Speculation control settings for CVE-2017-5715 [branch target injection]" -ForegroundColor Cyan
        # Write-Host

        $btiHardwarePresent = $false
        $btiWindowsSupportPresent = $false
        $btiWindowsSupportEnabled = $false
        $btiDisabledBySystemPolicy = $false
        $btiDisabledByNoHardwareSupport = $false
    
        [System.UInt32]$systemInformationClass = 201
        [System.UInt32]$systemInformationLength = 4

        $retval = $ntdll::NtQuerySystemInformation($systemInformationClass, $systemInformationPtr, $systemInformationLength, $returnLengthPtr)

        if ($retval -eq 0xc0000003 -or $retval -eq 0xc0000002) {
            # fallthrough
        }
        elseif ($retval -ne 0) {
            throw (("Querying branch target injection information failed with error {0:X8}" -f $retval))
        }
        else {
    
            [System.UInt32]$scfBpbEnabled = 0x01
            [System.UInt32]$scfBpbDisabledSystemPolicy = 0x02
            [System.UInt32]$scfBpbDisabledNoHardwareSupport = 0x04
            [System.UInt32]$scfHwReg1Enumerated = 0x08
            [System.UInt32]$scfHwReg2Enumerated = 0x10
            [System.UInt32]$scfHwMode1Present = 0x20
            [System.UInt32]$scfHwMode2Present = 0x40
            [System.UInt32]$scfSmepPresent = 0x80

            [System.UInt32]$flags = [System.UInt32][System.Runtime.InteropServices.Marshal]::ReadInt32($systemInformationPtr)

            $btiHardwarePresent = ((($flags -band $scfHwReg1Enumerated) -ne 0) -or (($flags -band $scfHwReg2Enumerated)))
            $btiWindowsSupportPresent = $true
            $btiWindowsSupportEnabled = (($flags -band $scfBpbEnabled) -ne 0)

            if ($btiWindowsSupportEnabled -eq $false) {
                $btiDisabledBySystemPolicy = (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
                $btiDisabledByNoHardwareSupport = (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            }

            # if ($PSBoundParameters['Verbose']) {
            #     Write-Host "BpbEnabled                   :" (($flags -band $scfBpbEnabled) -ne 0)
            #     Write-Host "BpbDisabledSystemPolicy      :" (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
            #     Write-Host "BpbDisabledNoHardwareSupport :" (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            #     Write-Host "HwReg1Enumerated             :" (($flags -band $scfHwReg1Enumerated) -ne 0)
            #     Write-Host "HwReg2Enumerated             :" (($flags -band $scfHwReg2Enumerated) -ne 0)
            #     Write-Host "HwMode1Present               :" (($flags -band $scfHwMode1Present) -ne 0)
            #     Write-Host "HwMode2Present               :" (($flags -band $scfHwMode2Present) -ne 0)
            #     Write-Host "SmepPresent                  :" (($flags -band $scfSmepPresent) -ne 0)
            # }
        }

        # Write-Host "Hardware support for branch target injection mitigation is present:"($btiHardwarePresent) -ForegroundColor $(If ($btiHardwarePresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # Write-Host "Windows OS support for branch target injection mitigation is present:"($btiWindowsSupportPresent) -ForegroundColor $(If ($btiWindowsSupportPresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # Write-Host "Windows OS support for branch target injection mitigation is enabled:"($btiWindowsSupportEnabled) -ForegroundColor $(If ($btiWindowsSupportEnabled) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
  
        if ($btiWindowsSupportPresent -eq $true -and $btiWindowsSupportEnabled -eq $false) {
            # "Windows OS support for branch target injection mitigation is disabled by system policy:"
            Write-Host -ForegroundColor Red ($btiDisabledBySystemPolicy)
        #     Write-Host -ForegroundColor Red "Windows OS support for branch target injection mitigation is disabled by absence of hardware support:"($btiDisabledByNoHardwareSupport)
        }
        else {
            Write-Host $false
        }

    }
    finally
    {
        if ($systemInformationPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($systemInformationPtr)
        }
 
        if ($returnLengthPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($returnLengthPtr)
        }
    }</DiscoveryScriptBody>
          </ScriptDiscoverySource>
        </SimpleSetting>
        <SimpleSetting LogicalName="ScriptSetting_cb417105-fa29-4352-9721-516d8f945c84" DataType="String">
          <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
            <DisplayName Text="Check whether Windows OS support for branch target injection mitigation is disabled by absence of hardware support" ResourceId="ID-bddab156-a415-4fde-bef5-96dfc8c6cf77" />
            <Description Text="" />
          </Annotation>
          <ScriptDiscoverySource Is64Bit="true">
            <DiscoveryScriptBody ScriptType="PowerShell">$NtQSIDefinition = @'
    [DllImport("ntdll.dll")]
    public static extern int NtQuerySystemInformation(uint systemInformationClass, IntPtr systemInformation, uint systemInformationLength, IntPtr returnLength);
'@
    
    $ntdll = Add-Type -MemberDefinition $NtQSIDefinition -Name 'ntdll' -Namespace 'Win32' -PassThru


    [System.IntPtr]$systemInformationPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)
    [System.IntPtr]$returnLengthPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)

    try {
    
        #
        # Query branch target injection information.
        #

        # Write-Host "Speculation control settings for CVE-2017-5715 [branch target injection]" -ForegroundColor Cyan
        # Write-Host

        $btiHardwarePresent = $false
        $btiWindowsSupportPresent = $false
        $btiWindowsSupportEnabled = $false
        $btiDisabledBySystemPolicy = $false
        $btiDisabledByNoHardwareSupport = $false
    
        [System.UInt32]$systemInformationClass = 201
        [System.UInt32]$systemInformationLength = 4

        $retval = $ntdll::NtQuerySystemInformation($systemInformationClass, $systemInformationPtr, $systemInformationLength, $returnLengthPtr)

        if ($retval -eq 0xc0000003 -or $retval -eq 0xc0000002) {
            # fallthrough
        }
        elseif ($retval -ne 0) {
            throw (("Querying branch target injection information failed with error {0:X8}" -f $retval))
        }
        else {
    
            [System.UInt32]$scfBpbEnabled = 0x01
            [System.UInt32]$scfBpbDisabledSystemPolicy = 0x02
            [System.UInt32]$scfBpbDisabledNoHardwareSupport = 0x04
            [System.UInt32]$scfHwReg1Enumerated = 0x08
            [System.UInt32]$scfHwReg2Enumerated = 0x10
            [System.UInt32]$scfHwMode1Present = 0x20
            [System.UInt32]$scfHwMode2Present = 0x40
            [System.UInt32]$scfSmepPresent = 0x80

            [System.UInt32]$flags = [System.UInt32][System.Runtime.InteropServices.Marshal]::ReadInt32($systemInformationPtr)

            $btiHardwarePresent = ((($flags -band $scfHwReg1Enumerated) -ne 0) -or (($flags -band $scfHwReg2Enumerated)))
            $btiWindowsSupportPresent = $true
            $btiWindowsSupportEnabled = (($flags -band $scfBpbEnabled) -ne 0)

            if ($btiWindowsSupportEnabled -eq $false) {
                $btiDisabledBySystemPolicy = (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
                $btiDisabledByNoHardwareSupport = (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            }

            # if ($PSBoundParameters['Verbose']) {
            #     Write-Host "BpbEnabled                   :" (($flags -band $scfBpbEnabled) -ne 0)
            #     Write-Host "BpbDisabledSystemPolicy      :" (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
            #     Write-Host "BpbDisabledNoHardwareSupport :" (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            #     Write-Host "HwReg1Enumerated             :" (($flags -band $scfHwReg1Enumerated) -ne 0)
            #     Write-Host "HwReg2Enumerated             :" (($flags -band $scfHwReg2Enumerated) -ne 0)
            #     Write-Host "HwMode1Present               :" (($flags -band $scfHwMode1Present) -ne 0)
            #     Write-Host "HwMode2Present               :" (($flags -band $scfHwMode2Present) -ne 0)
            #     Write-Host "SmepPresent                  :" (($flags -band $scfSmepPresent) -ne 0)
            # }
        }

        # Write-Host "Hardware support for branch target injection mitigation is present:"($btiHardwarePresent) -ForegroundColor $(If ($btiHardwarePresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # Write-Host "Windows OS support for branch target injection mitigation is present:"($btiWindowsSupportPresent) -ForegroundColor $(If ($btiWindowsSupportPresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # Write-Host "Windows OS support for branch target injection mitigation is enabled:"($btiWindowsSupportEnabled) -ForegroundColor $(If ($btiWindowsSupportEnabled) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
  
        if ($btiWindowsSupportPresent -eq $true -and $btiWindowsSupportEnabled -eq $false) {
        #     Write-Host -ForegroundColor Red "Windows OS support for branch target injection mitigation is disabled by system policy:"($btiDisabledBySystemPolicy)
            # "Windows OS support for branch target injection mitigation is disabled by absence of hardware support:"
            Write-Host -ForegroundColor Red ($btiDisabledByNoHardwareSupport)
        }
        else {
            Write-Host $false
        }

    }
    finally
    {
        if ($systemInformationPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($systemInformationPtr)
        }
 
        if ($returnLengthPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($returnLengthPtr)
        }
    }</DiscoveryScriptBody>
          </ScriptDiscoverySource>
        </SimpleSetting>
        <SimpleSetting LogicalName="ScriptSetting_7f3e719a-f37a-4039-b080-44a8d297c1f7" DataType="String">
          <Annotation xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
            <DisplayName Text="Check whether Windows OS support for branch target injection mitigation is present" ResourceId="ID-7e3cb606-2a13-4c43-bd99-16255b39fe0b" />
            <Description Text="" />
          </Annotation>
          <ScriptDiscoverySource Is64Bit="true">
            <DiscoveryScriptBody ScriptType="PowerShell">$NtQSIDefinition = @'
    [DllImport("ntdll.dll")]
    public static extern int NtQuerySystemInformation(uint systemInformationClass, IntPtr systemInformation, uint systemInformationLength, IntPtr returnLength);
'@
    
    $ntdll = Add-Type -MemberDefinition $NtQSIDefinition -Name 'ntdll' -Namespace 'Win32' -PassThru


    [System.IntPtr]$systemInformationPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)
    [System.IntPtr]$returnLengthPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(4)

    try {
    
        #
        # Query branch target injection information.
        #

        # Write-Host "Speculation control settings for CVE-2017-5715 [branch target injection]" -ForegroundColor Cyan
        # Write-Host

        $btiHardwarePresent = $false
        $btiWindowsSupportPresent = $false
        $btiWindowsSupportEnabled = $false
        $btiDisabledBySystemPolicy = $false
        $btiDisabledByNoHardwareSupport = $false
    
        [System.UInt32]$systemInformationClass = 201
        [System.UInt32]$systemInformationLength = 4

        $retval = $ntdll::NtQuerySystemInformation($systemInformationClass, $systemInformationPtr, $systemInformationLength, $returnLengthPtr)

        if ($retval -eq 0xc0000003 -or $retval -eq 0xc0000002) {
            # fallthrough
        }
        elseif ($retval -ne 0) {
            throw (("Querying branch target injection information failed with error {0:X8}" -f $retval))
        }
        else {
    
            [System.UInt32]$scfBpbEnabled = 0x01
            [System.UInt32]$scfBpbDisabledSystemPolicy = 0x02
            [System.UInt32]$scfBpbDisabledNoHardwareSupport = 0x04
            [System.UInt32]$scfHwReg1Enumerated = 0x08
            [System.UInt32]$scfHwReg2Enumerated = 0x10
            [System.UInt32]$scfHwMode1Present = 0x20
            [System.UInt32]$scfHwMode2Present = 0x40
            [System.UInt32]$scfSmepPresent = 0x80

            [System.UInt32]$flags = [System.UInt32][System.Runtime.InteropServices.Marshal]::ReadInt32($systemInformationPtr)

            $btiHardwarePresent = ((($flags -band $scfHwReg1Enumerated) -ne 0) -or (($flags -band $scfHwReg2Enumerated)))
            $btiWindowsSupportPresent = $true
            $btiWindowsSupportEnabled = (($flags -band $scfBpbEnabled) -ne 0)

            if ($btiWindowsSupportEnabled -eq $false) {
                $btiDisabledBySystemPolicy = (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
                $btiDisabledByNoHardwareSupport = (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            }

            # if ($PSBoundParameters['Verbose']) {
            #     Write-Host "BpbEnabled                   :" (($flags -band $scfBpbEnabled) -ne 0)
            #     Write-Host "BpbDisabledSystemPolicy      :" (($flags -band $scfBpbDisabledSystemPolicy) -ne 0)
            #     Write-Host "BpbDisabledNoHardwareSupport :" (($flags -band $scfBpbDisabledNoHardwareSupport) -ne 0)
            #     Write-Host "HwReg1Enumerated             :" (($flags -band $scfHwReg1Enumerated) -ne 0)
            #     Write-Host "HwReg2Enumerated             :" (($flags -band $scfHwReg2Enumerated) -ne 0)
            #     Write-Host "HwMode1Present               :" (($flags -band $scfHwMode1Present) -ne 0)
            #     Write-Host "HwMode2Present               :" (($flags -band $scfHwMode2Present) -ne 0)
            #     Write-Host "SmepPresent                  :" (($flags -band $scfSmepPresent) -ne 0)
            # }
        }

        # Write-Host "Hardware support for branch target injection mitigation is present:"($btiHardwarePresent) -ForegroundColor $(If ($btiHardwarePresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # "Windows OS support for branch target injection mitigation is present:"
        Write-Host ($btiWindowsSupportPresent) -ForegroundColor $(If ($btiWindowsSupportPresent) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
        # Write-Host "Windows OS support for branch target injection mitigation is enabled:"($btiWindowsSupportEnabled) -ForegroundColor $(If ($btiWindowsSupportEnabled) { [System.ConsoleColor]::Green } Else { [System.ConsoleColor]::Red })
  
        # if ($btiWindowsSupportPresent -eq $true -and $btiWindowsSupportEnabled -eq $false) {
        #     Write-Host -ForegroundColor Red "Windows OS support for branch target injection mitigation is disabled by system policy:"($btiDisabledBySystemPolicy)
        #     Write-Host -ForegroundColor Red "Windows OS support for branch target injection mitigation is disabled by absence of hardware support:"($btiDisabledByNoHardwareSupport)
        # }
    }
    finally
    {
        if ($systemInformationPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($systemInformationPtr)
        }
 
        if ($returnLengthPtr -ne [System.IntPtr]::Zero) {
            [System.Runtime.InteropServices.Marshal]::FreeHGlobal($returnLengthPtr)
        }
    }</DiscoveryScriptBody>
          </ScriptDiscoverySource>
        </SimpleSetting>
      </RootComplexSetting>
    </Settings>
    <Rules>
      <Rule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" id="Rule_93e07a1e-f2ab-492c-821c-b5cd1b1af9ac" Severity="Informational" NonCompliantWhenSettingIsNotFound="false">
        <Annotation>
          <DisplayName Text="Windows OS support for branch target injection mitigation is present" ResourceId="ID-f92afaee-82d5-4b21-825d-9da2a53ee8f8" />
          <Description Text="" />
        </Annotation>
        <Expression>
          <Operator>Equals</Operator>
          <Operands>
            <SettingReference AuthoringScopeId="ScopeId_0D7D8B60-F2F9-484A-B9F3-4A8B68D14D59" LogicalName="LogicalName_a9eb8299-02df-423d-ae80-b52768655212" Version="6" DataType="String" SettingLogicalName="ScriptSetting_7f3e719a-f37a-4039-b080-44a8d297c1f7" SettingSourceType="Script" Method="Value" Changeable="false" />
            <ConstantValue Value="True" DataType="String" />
          </Operands>
        </Expression>
      </Rule>
      <Rule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" id="Rule_0b7f5c6a-af50-46fa-befa-4161423cc1b2" Severity="Critical" NonCompliantWhenSettingIsNotFound="false">
        <Annotation>
          <DisplayName Text="Windows OS support for branch target injection mitigation is enabled" ResourceId="ID-aad5abc5-b1e6-4761-b577-0e69430451dc" />
          <Description Text="" />
        </Annotation>
        <Expression>
          <Operator>Equals</Operator>
          <Operands>
            <SettingReference AuthoringScopeId="ScopeId_0D7D8B60-F2F9-484A-B9F3-4A8B68D14D59" LogicalName="LogicalName_a9eb8299-02df-423d-ae80-b52768655212" Version="6" DataType="String" SettingLogicalName="ScriptSetting_004f0999-2dc2-48b0-bb70-f61035a60a33" SettingSourceType="Script" Method="Value" Changeable="false" />
            <ConstantValue Value="True" DataType="String" />
          </Operands>
        </Expression>
      </Rule>
      <Rule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" id="Rule_5d5d8464-51f1-401d-9163-94a5882b1545" Severity="Informational" NonCompliantWhenSettingIsNotFound="false">
        <Annotation>
          <DisplayName Text="Windows OS support for branch target injection mitigation is disabled by absence of hardware support" ResourceId="ID-668781ba-92e0-40e9-b01e-e86fcbdb1eeb" />
          <Description Text="" />
        </Annotation>
        <Expression>
          <Operator>Equals</Operator>
          <Operands>
            <SettingReference AuthoringScopeId="ScopeId_0D7D8B60-F2F9-484A-B9F3-4A8B68D14D59" LogicalName="LogicalName_a9eb8299-02df-423d-ae80-b52768655212" Version="6" DataType="String" SettingLogicalName="ScriptSetting_cb417105-fa29-4352-9721-516d8f945c84" SettingSourceType="Script" Method="Value" Changeable="false" />
            <ConstantValue Value="False" DataType="String" />
          </Operands>
        </Expression>
      </Rule>
      <Rule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules" id="Rule_7c913eb2-4cc3-448d-ba43-d12e6dbafcc5" Severity="Informational" NonCompliantWhenSettingIsNotFound="false">
        <Annotation>
          <DisplayName Text="Windows OS support for branch target injection mitigation is disabled by system policy" ResourceId="ID-917193d6-0af6-466b-8d21-0fdbb449739e" />
          <Description Text="" />
        </Annotation>
        <Expression>
          <Operator>Equals</Operator>
          <Operands>
            <SettingReference AuthoringScopeId="ScopeId_0D7D8B60-F2F9-484A-B9F3-4A8B68D14D59" LogicalName="LogicalName_a9eb8299-02df-423d-ae80-b52768655212" Version="6" DataType="String" SettingLogicalName="ScriptSetting_95f57c75-84de-4939-b179-94e349ae7204" SettingSourceType="Script" Method="Value" Changeable="false" />
            <ConstantValue Value="False" DataType="String" />
          </Operands>
        </Expression>
      </Rule>
    </Rules>
    <OperatingSystemDiscoveryRule xmlns="http://schemas.microsoft.com/SystemsCenterConfigurationManager/2009/06/14/Rules">
      <OperatingSystemExpression>
        <Operator>OneOf</Operator>
        <Operands>
          <RuleExpression RuleId="Windows/All_x64_Windows_XP_Professional" />
          <RuleExpression RuleId="Windows/All_x86_Windows_XP" />
          <RuleExpression RuleId="Windows/x64_Windows_XP_Professional_SP2" />
          <RuleExpression RuleId="Windows/x86_Windows_XP_Professional_Service_Pack_3" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Vista" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Vista" />
          <RuleExpression RuleId="Windows/x64_Windows_Vista_SP2" />
          <RuleExpression RuleId="Windows/x86_Windows_Vista_SP2" />
          <RuleExpression RuleId="Windows/All_x64_Windows_7_Client" />
          <RuleExpression RuleId="Windows/All_x86_Windows_7_Client" />
          <RuleExpression RuleId="Windows/x64_Windows_7_Client" />
          <RuleExpression RuleId="Windows/x64_Windows_7_SP1" />
          <RuleExpression RuleId="Windows/x86_Windows_7_Client" />
          <RuleExpression RuleId="Windows/x86_Windows_7_SP1" />
          <RuleExpression RuleId="Windows/All_x64_Windows_8_Client" />
          <RuleExpression RuleId="Windows/All_x86_Windows_8_Client" />
          <RuleExpression RuleId="Windows/All_x64_Windows_8.1_Client" />
          <RuleExpression RuleId="Windows/All_x86_Windows_8.1_Client" />
          <RuleExpression RuleId="Windows/All_x64_Windows_10_and_higher_Clients" />
          <RuleExpression RuleId="Windows/All_x86_Windows_10_and_higher_Clients" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_2003_Non_R2" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_2003_R2" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Server_2003_Non_R2" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Server_2003_R2" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2003_R2_SP2" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2003_SP2" />
          <RuleExpression RuleId="Windows/x86_Windows_Server_2003_R2_SP2" />
          <RuleExpression RuleId="Windows/x86_Windows_Server_2003_SP2" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_2008" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_2008_R2" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Server_2008" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2008_R2" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2008_R2_CORE" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2008_R2_SP1" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2008_R2_SP1_Core" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2008_SP2" />
          <RuleExpression RuleId="Windows/x64_Windows_Server_2008_SP2_Core" />
          <RuleExpression RuleId="Windows/x86_Windows_Server_2008_SP2" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_8" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_2012_R2" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Server_2016" />
          <RuleExpression RuleId="Windows/All_Embedded_Windows_XP" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Embedded_8.1_Industry" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Embedded_8_Industry" />
          <RuleExpression RuleId="Windows/All_x64_Windows_Embedded_8_Standard" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Embedded_8.1_Industry" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Embedded_8_Industry" />
          <RuleExpression RuleId="Windows/All_x86_Windows_Embedded_8_Standard" />
          <RuleExpression RuleId="Windows/x64_Embedded_Windows_7" />
          <RuleExpression RuleId="Windows/x86_Embedded_Windows_7" />
        </Operands>
      </OperatingSystemExpression>
    </OperatingSystemDiscoveryRule>
  </OperatingSystem>
</DesiredConfigurationDigest>